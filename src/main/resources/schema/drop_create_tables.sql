DECLARE TYPE ARR_TABL IS VARRAY (3) OF VARCHAR2(50);
	tables         ARR_TABL;
	existence_flag INTEGER;
BEGIN tables := arr_tabl('T_USER_AUTHORITIES', 'T_PERSISTED_TOKENS', 'T_USERS');
	FOR i IN 1 .. tables.count LOOP SELECT count(*) INTO existence_flag FROM user_tables WHERE table_name = tables(i);
		dbms_output.put_line(existence_flag);
		IF existence_flag = 1
		THEN EXECUTE IMMEDIATE 'DROP TABLE ' || tables(i) || ' cascade constraints'; END IF;
	END LOOP;
END;
/

CREATE TABLE t_users (
	username   VARCHAR2(50)  NOT NULL UNIQUE,
	password   VARCHAR2(100) NOT NULL,
	enabled    CHAR(1)       NOT NULL,
	first_name VARCHAR2(50),
	last_name  VARCHAR2(50),
	CONSTRAINT enabled_ck CHECK (enabled IN ('0', '1'))
);
/

CREATE TABLE t_user_authorities (
	auth_id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	username  VARCHAR2(50)  NOT NULL,
	authority VARCHAR2(100) NOT NULL,
	CONSTRAINT uname_fk FOREIGN KEY (username) REFERENCES t_users (username),
	CONSTRAINT uname_auth_unique UNIQUE (username, authority)
);
/

INSERT INTO t_users
VALUES ('ALEX_ADMIN', '$2a$10$E15ih8eCS4xGchLEUuXzWObWM2soirZczW.a2TGzjslt6ZrOUtcyC', '1', 'ALEXEI', 'BRINZA');

INSERT INTO t_user_authorities (username, authority)
VALUES ('ALEX_ADMIN', 'ROLE_ADMIN');
INSERT INTO t_user_authorities (username, authority)
VALUES ('ALEX_ADMIN', 'ROLE_USER');
/

COMMIT;
/

CREATE TABLE t_persisted_tokens (
	series     VARCHAR(64) PRIMARY KEY,
	username   VARCHAR(64) NOT NULL,
	tokenvalue VARCHAR(64) NOT NULL,
	last_used  TIMESTAMP   NOT NULL,
	CONSTRAINT username_fk FOREIGN KEY (username) REFERENCES t_users (username)
);
/